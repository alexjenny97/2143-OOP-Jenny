/**
* Course: CMPS 2143 - OOP
* Assignment: A02
* Purpose: Create linked list class
* 
* @author Alex Jenny
* @version 1.1 09/05/17
*/


#include <iostream>

using namespace std;

int A[100];

/**
* Node with value and pointer
* Value either given or set to -1
*/
struct Node
{
    int x;
    Node *next;
    Node()
    {
        x = -1;
        next = NULL;
    }
    Node(int n)
    {
        x = n;
        next = NULL;
    }
};

/**
* Head.next -> NULL and Tail.next -> NULL
* Methods included: Push, Insert, PrintTail, Print, Pop (not implemented), 
* Overloaded Operators: + ( can add lists), [] (used like ()), << (can cout list)
*/
class List
{
  private:
    Node *Head;
    Node *Tail;
    int Size;

  public:
    // default constructor
    List()
    {
        Head = Tail = NULL;
        Size = 0;
    }

    **/ 
    * pushes val to back of list
    *
    * @param {int} val : The value to be added
    */
    void Push(int val)
    {
        // allocate new memory and init node
        Node *Temp = new Node(val);

        if (!Head && !Tail) // then list is empty
        {
            Head = Tail = Temp;
        }
        else 
        {
            Tail->next = Temp;
            Tail = Temp;
        }
        Size++;
    }

    **/
    * Insterts a value to the begining of list
    * 
    * @param {int} val : The value to be added
    */
    void Insert(int val)
    {
        // allocate new memory and init node
        Node *Temp = new Node(val);

        // figure out where it goes in the list

        Temp->next = Head;
        Head = Temp;
        if (!Tail) // then Tail == NULL => list was empty
        {
            Tail = Head;
        }
        Size++;
    }

    **/
    * Prints the last element of list
    */
    void PrintTail()
    {
        cout << Tail->x << endl;
    }

    **/
    * method that returns  list, a string with arrows inbetween elements
    *
    * @return {string} the list made into a string
    */
    string Print()
    {
        Node *Temp = Head;
        string list;

        while (Temp != NULL) // while there are elements in List
        {
            list += to_string(Temp->x) + "->";
            Temp = Temp->next;
        }

        return list;
    }
    
    **/
    * not implemented
    * should remove the first node in list, no code written
    */
    int Pop()
    {
        Size--;
        return 0; //
    }

    **/
    * Overloads the operator + so it can add lists together
    * 
    * @param {list} : Rhs, the list to be added
    * @return {list} the new appended list
    */
    List operator+(const List &Rhs)
    {
        // Create a new list that will contain both when done
        List NewList;

        // Get a reference to beginning of local list
        Node *Temp = Head;

        // Loop through local list and Push values onto new list
        while (Temp != NULL)
        {
            NewList.Push(Temp->x);
            Temp = Temp->next;
        }

        // Get a reference to head of Rhs
        Temp = Rhs.Head;

        // Same as above, loop and push
        while (Temp != NULL)
        {
            NewList.Push(Temp->x);
            Temp = Temp->next;
        }

        // Return new concatenated version of lists
        return NewList;
    }

    **/
    * Implementation of [] operator
    * 
    * @returns {int} value as if the list were an array
    */
    int operator[](int index)
    {
        Node *Temp = Head;

        if (index >= Size) // then index is too big
        {
            cout << "Index out of bounds, exiting";
            exit(0);
        }
        else
        {

            for (int i = 0; i < index; i++) // find correct value of index
            {
                Temp = Temp->next;
            }
            
            // return desired value
            return Temp->x;
        }
    }

    **/
    * Overloads the << operator to print lists
    * 
    * @param {ostream, list} : os and L 
    * @return {ostream} the os
    */
    friend ostream &operator<<(ostream &os, List L)
    {
        os << L.Print();
        return os;
    }
};

// Controls operation of the program
int main(int argc, char **argv)
{
    // create two lists
    List L1;
    List L2;

    // fill the first list with values 0-24 (check push method)
    for (int i = 0; i < 25; i++)
    {
        L1.Push(i);
    }

    // fill the second list with values 50-99
    for (int i = 50; i < 100; i++)
    {
        L2.Push(i);
    }

    // print first list (check << operator)
    //cout << L1 << endl;
    
    // print last elemwnt of each list (ckeck PrintTail method)
    L1.PrintTail();
    L2.PrintTail();

    // create list three by adding list two to list one (check + operator)
    List L3 = L1 + L2;
    cout << L3 << endl;
    cout << L3[5] << endl; // check [] operator
    
    return 0;
}
